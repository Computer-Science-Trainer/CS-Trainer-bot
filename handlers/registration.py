from aiogram import types
from aiogram import F
import random
from logging import error
# from aiogram.filters import Text
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from services.user_service import save_user, change_db_users, get_user_by_email
from stations import Registration
from security import create_access_token, decode_access_token, verify_password
from services.email_service import send_verification_email

MAX_AVATAR_SIZE = 1024 * 300  # 300 KB
MAX_USERNAME_LEN = 32
MAX_EMAIL_LEN = 320
MAX_TELEGRAM_LEN = 255
MAX_GITHUB_LEN = 255
MAX_WEBSITE_LEN = 255
MAX_BIO_LEN = 500


def generate_verification_code() -> str:
    return f"{random.randint(0, 999999):06d}"


def register_handlers(dp):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message, state: FSMContext):
        text = ('–ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ó–∞–π—Ü–µ–≤—É?\n–¢—ã –ø–æ –∞–¥—Ä–µ—Å—É! '
                '–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                '(–î–∞–∂–µ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.) \n –í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É:')
        remove_keyboard = types.ReplyKeyboardRemove()
        await message.answer(text, reply_markup=remove_keyboard)
        await state.set_state(Registration.email)

    @dp.message(Registration.email)
    async def get_email(message: types.Message, state: FSMContext):
        await state.update_data(email=message.text)
        forgot_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="forget_password")]
        ])
        await message.answer(
            '–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.',
            reply_markup=forgot_kb
        )
        await state.set_state(Registration.password)

    @dp.message(Registration.password)
    async def get_password(message: types.Message, state: FSMContext):
        await state.update_data(password=message.text)
        data = await state.get_data()
        user = get_user_by_email(data['email'])
        if user:
            if verify_password(data['password'], user['password']) and user['verified'] == True:
                if change_db_users(user['email'], ('telegram', message.from_user.username)) != 'success':
                    error(f"DB save failed for user {user['email']}. Data: telegram")
                    await message.answer(
                        "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                await message.answer(f'–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. {user['username']}, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.')
                await state.clear()
            elif not verify_password(data['password'], user['password']):
                await message.answer('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.')
                await state.set_state(Registration.password)
            else:
                text = ('–í—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–°–µ–π—á–∞—Å –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n'
                        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.')
                await message.answer(text)
                code = generate_verification_code()
                if change_db_users(user['email'], ('verification_code', code)) != 'success':
                    error(f"DB save failed for user {user['email']}. Data: {code}")
                    await message.answer(
                        "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                #background_tasks.add_task(send_verification_email, user['email'], code)
                print(f'Verification code for {user['email']}: {code}')
                await state.set_state(Registration.verification)
        else:
            await message.answer('–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.')
            await state.set_state(Registration.name)

    @dp.message(Registration.verification)
    async def get_verification_code(message: types.Message, state: FSMContext):
        await state.update_data(verification_code=message.text)
        data = await state.get_data()
        user = get_user_by_email(data['email'])
        if data['verification_code'] == user['verification_code']:
            if change_db_users(data['email'], ('verified', 1)) != 'success':
                error(f"DB save failed for user {user['email']}. Data: verification")
                await message.answer(
                    "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            if not data['password']:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.")
                await state.set_state(Registration.password)
            if change_db_users(data['email'], ('verified', 1)) != 'success':
                error(f"DB save failed for user {user['email']}. Data: verification")
                await message.answer(
                    "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            await message.answer("–í—ã –≤–æ—à–ª–∏, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!")
            await state.clear()
        else:
            await message.answer("–ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω. –í —Å–ª—É—á–∞–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–º. –º–µ–Ω—é.")
            await state.set_state(Registration.verification)


    @dp.message(Registration.name)
    async def get_name(message: types.Message, state: FSMContext):
        await state.update_data(name=message.text)
        data = await state.get_data()
        code = generate_verification_code()
        if change_db_users(data['email'], ('verification_code', code)) != 'success':
            error(f"DB save failed for user {data['email']}. Data: {code}")
            await message.answer(
                "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                reply_markup=types.ReplyKeyboardRemove()
            )
        #background_tasks.add_task(send_verification_email, data['email'], code)
        print(f'Verification code for {data['email']}: {code}')
        if save_user(data['email'], data['password'], data['name'], False, code):
            error(f"DB save failed for user {data['email']}.")
            await message.answer(
                "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω",
                reply_markup=types.ReplyKeyboardRemove()
            )
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ö–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.')
        await state.set_state(Registration.verification)

    @dp.callback_query(F.data == "forget_password")
    async def handle_forget_password(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer()
        await state.update_data(password=None)
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer('–ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.')
        await state.set_state(Registration.verification)